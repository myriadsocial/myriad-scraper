name: Beta automation

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+-beta*'

concurrency:
  group: beta-automation

jobs:
  compute-build-info:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.build-info.outputs.latest_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          version=${GITHUB_REF#refs/*/}
          echo $version
          echo "::set-output name=latest_tag::$version"

  build-and-publish-docker-image:
    runs-on: ubuntu-latest
    needs: compute-build-info
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-main
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: .maintain/docker/Dockerfile
          tags: |
            ${{ github.repository }}:${{ needs.compute-build-info.outputs.latest_tag }}
            ${{ github.repository }}:latest-beta
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  publish-draft-release:
    runs-on: ubuntu-latest
    needs: [build-and-publish-docker-image]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: '.github/workflows/rcb_config.json'
      - name: Create draft release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: true
          prerelease: true

  deploy:
    runs-on: ubuntu-latest
    needs: [compute-build-info, publish-draft-release]
    env:
      DEPLOY: ${{ secrets.PREPROD_DEPLOY }}
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.PREPROD_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.PREPROD_GCP_SA_KEY }}
          export_default_credentials: true
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SCRAPER_APP_HOST:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SCRAPER_APP_HOST
            SCRAPER_PORT:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SCRAPER_PORT
            GUN_USER:${{ secrets.PREPROD_GCP_PROJECT_ID }}/GUN_USER
            GUN_PWD:${{ secrets.PREPROD_GCP_PROJECT_ID }}/GUN_PWD
            GUN_HOST:${{ secrets.PREPROD_GCP_PROJECT_ID }}/GUN_HOST
            GUN_PORT:${{ secrets.PREPROD_GCP_PROJECT_ID }}/GUN_PORT
            SSH_HOST:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.PREPROD_GCP_PROJECT_ID }}/SSH_PORT

      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add myriad https://charts.myriad.systems
            helm repo update
            helm upgrade myriad-scraper myriad/myriad-scraper \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.appHost=${{ steps.secrets.outputs.SCRAPER_APP_HOST }} \
              --set-string config.port=${{ steps.secrets.outputs.SCRAPER_PORT }} \
              --set-string config.gun.user=${{ steps.secrets.outputs.GUN_USER }} \
              --set-string config.gun.pwd=${{ steps.secrets.outputs.GUN_PWD }} \
              --set-string config.gun.host=${{ steps.secrets.outputs.GUN_HOST }} \
              --set-string config.gun.port=${{ steps.secrets.outputs.GUN_PORT }} \
              --set ingress.enabled=true \
              --set-string ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="10" \
              --set-string ingress.hosts[0].host=scraper.testnet.myriad.systems \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-scraper-tls \
              --set-string ingress.tls[0].hosts[0]=scraper.testnet.myriad.systems \
              --set autoscaling.enabled=true
            kubectl rollout status deployment/myriad-scraper
